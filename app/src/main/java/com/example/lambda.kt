package com.example

import java.util.Calendar


class lambda {
}

/*лямбда это анонимные функции. Имеют своё поведение.
 Умеют принимать и возвращать параметры, но не имеют имени.
это выражение, которое содержит блок кода.
Для их создания не нужно указывать ключевое слово fun, достаточно заключить код в фигурные скобки

 */
fun main() {

    val calendar: Calendar = Calendar.getInstance()

    // лямбда выражение и анонимные функции можно присваивать переменной.
    // Но стоит запомнить, что это не сохранение значение функции, а короткий вызов самой функции через эту переменную
    val getDaysToEndYear: () -> Int = fun(): Int = 365 - calendar[Calendar.DAY_OF_YEAR]
    //чтобы вызвать такую переменную, надо ее использовать в круглых скобках
    println(getDaysToEndYear())
    // либо использовать функцию вызова .invoke()
    println(getDaysToEndYear.invoke())

    val convertEndDaysToMills: (Int) -> Unit = fun(endDays: Int)= println(1000*60*60*24*endDays)
    convertEndDaysToMills(getDaysToEndYear())
    // так же в одну лямбда выражение и анонимные функции можно передать другую лямбда выражение и анонимные функции в виде параметров либо обычными параметрами


    // длинный вызов лямбда выражения в 3 шага
    val printStringLambda : (it: Int) -> Unit

    printStringLambda = {
        println("ПРивет, я это лямбда выражение, ты будешь $it")
    }
    printStringLambda(1);

    //короткий вызов лямбда выражения с возвратом значения лямбды.
    // для возврата не нужно использовать ключевое слово return. Лямбда всегда возвращает своё выражение
    {it : Int ->println("ПРивет, ты учишься писать лямбда выражения $it")}(99)
    // чтобы вызвать лямбда выражение с параметром, нужно передать обозначит его в начале лямбы выражения, указав имя и тип параметра
    // для короткого вызова нужна указать нужный принимающий параметр в круглых скобках после фигурных скобок,
// можно передать сюда любое значние либо готовую лямбда выражение или анонимную функцию
    // и затем передать его через переменную
}
