package com.example.myapp.ui

class keywordsAndOperators {

    /*
    Жесткие ключевые слова (Hard Keywords)
Следующие слова всегда интерпретируются как ключевые и не могут использоваться в качестве идентификаторов:

as
используется для приведения типов
задает альтернативное имя для импорта
as? используется для безопасного приведения типов
break завершает выполнение цикла
class объявляет класс
continue переходит к следующему шагу ближайшего вложенного цикла
do начинает цикл do/while loop (цикл с постусловием)
else определяет ветвь выражения if, которое выполняется, когда условие ложно
false указывает значение 'false' типа Boolean
for начинает цикл for
fun объявляет функцию
if начинает условное выражение if

in
указывает объект, который перебирается в цикле for
используется как инфиксный оператор для проверки того, что значение принадлежит диапазону, коллекции или другого объекта, который определяет метод 'contains'
используется в выражениях when с той же целью
отмечает параметр типа как контравариантный


!in
используется в качестве оператора для проверки того, что значение не принадлежит диапазону, коллекции или другой объекта, который определяет метод 'contains'
используется в выражениях when с той же целью
interface объявляет интерфейс

is
проверяет, что значение имеет определенный тип
используется в выражениях when с той же целью

!is
проверяет, что значение не имеет определенный тип
используется в выражениях when с той же целью
null константа, представляющая ссылку на объект, которая не указывает ни на один объект
object объявляет класс и его экземпляр одновременно
package указывает пакет для текущего файла
return по умолчанию производит возврат из ближайшей окружающей его функции или анонимной функции
super
ссылается на реализацию суперкласса метода или свойства
вызывает конструктор суперкласса из вторичного конструктора

this
относится к текущему приемнику
вызывает другой конструктор того же класса из вторичного конструктор
throw вызывает исключение
true задает значение 'true' типа Boolean
try начинает блок обработки исключений
typealias объявляет псевдоним типа
val объявляет свойствотолько для чтения или локальную переменную
var объявляет изменяемое свойство или локальную переменную
when начинает выражение when (выполняет одну из заданных ветвей)
while начинает цикл while (цикл с предусловием)
Мягкие Ключевые Слова (Soft Keywords)
Следующие слова действуют как ключевые в контексте, когда они применимы и могут использоваться как идентификаторы в других контекстах:

by
делегирует реализацию интерфейса другому объекту
делегирует реализацию методов доступа для свойства другому объекту
catch начинает блок, который обрабатывает определенный тип исключения
constructor объявляет первичный или вторичный конструктор
delegate используется в качестве целевого объекта аннотации
dynamic ссылается на динамический тип в Kotlin/JS коде
field используется в качестве целевого объекта аннотации
file используется в качестве целевого объекта аннотации
finally начинает блок, который всегда выполняется при выходе из блока try

get
объявляет геттер свойства
используется в качестве целевого объекта аннотации
import импортирует объявление из другого пакета в текущий файл
init начинает блок инициализации
param используется в качестве целевого объекта аннотации
property используется в качестве целевого объекта аннотации
receiverиспользуется в качестве целевого объекта аннотации

set
объявляет сеттер свойства
используется в качестве целевого объекта аннотации
setparam используется в качестве целевого объекта аннотации
where задает ограничения для параметра универсального типа





Модификаторы (Modifier Keywords)
Следующие слова действуют как ключевые в списках модификаторов объявлений и могут использоваться как идентификаторы в других контекстах:

actual означает реализацию Платформы в мультиплатформенных проектах
abstract обозначает класс или элемент как абстрактный
annotation объявляет класс аннотации
companion объявляет объект-компаньон
const помечает свойство как константу времени компиляции
crossinline запрещает нелокальные возвраты в лямбде, передаваемом встроенной функции
data указывает компилятору генерировать канонические элементы для класса
enum объявляет перечисление
expect отмечает объявление как платформенное, ожидая реализации в модулях платформы.
external отмечает объявление как реализованное не в Kotlin (доступное через JNI или JavaScript)
final запрещает переопределение элемента
infix позволяет вызывать функцию в инфиксной записи
inline указывает компилятору встроить функцию и лямбда-выражение на стороне вызова
inner позволяет ссылаться на экземпляр внешнего класса из вложенного класса
internal помечает объявление как видимое в текущем модуле
lateinit позволяет инициализировать не-null свойство вне конструктора
noinline отключает подстановку лямбды, переданной во встроенную функцию
open позволяет создавать подклассы класса или переопределять элемент
operator обозначает функцию как перегрузку оператора или реализацию соглашения
out обозначает тип параметра как ковариантный
override помечает элемент как переопределение элемента суперкласса
private помечает объявление как видимое в текущем классе или файле
protected помечает объявление как видимое в текущем классе и его подклассах
public помечает декларацию как видимую в любом месте
reified обозначает параметр типа встроенной функции, как доступная во время выполнения
sealed объявляет изолированный класс (класс с ограниченным подклассом)
suspend обозначает функцию или лямбда как приостанавливаемую (используется как сопрограмма)
tailrec отмечает функцию как с хвостовой рекурсией (позволяя компилятору заменить рекурсию итерацией)
vararg позволяет передавать нефиксированное число аргументов для параметра


*Специальные идентификаторы (Special Identifiers)
*Следующие идентификаторы определяются компилятором в определенных контекстах и могут использоваться как обычные идентификаторы в других контекстах:

field используется внутри метода доступа свойства для ссылки на backing field свойства
it используется внутри лямбды, чтобы косвенно ссылаться на ее параметр



Операторы и специальные символы (Operators and Special Symbols)
Котлин поддерживает следующие операторы и специальные символы:

+, -, *, /, % - математические операторы
* также используется для передачи массива в параметр vararg
=
оператор присваивания
используется для указания значений по умолчанию для параметров
+=, -=, *=, /=, %= - расширенные операторы присваивания
++, -- - операторы инкремента и декремента
&&, ||, ! - логические операторы 'и', 'или', 'не' (для побитовых операций используют соответствующие инфиксные функции)
==, != - операторы равенства (переведенные на вызовы equals() для не-примитивных типов)
===, !== - операторы ссылочного равенства
<, >, <=, >= - операторы сравнения (переведенные на вызовы compareTo() для не-примитивных типов)
[, ] - оператор индексированного доступа (переведенный на вызовы get и set)
!! утверждает, что выражение не равно null
?. выполняет безопасный вызов (вызывает метод или обращается к свойству, если получатель не имеет значения null)
?: принимает правое значение, если левое значение равно нулю (Элвис оператор)
:: создает ссылку на элемент или ссылку на класс
.. создает диапазон
: отделяет имя от типа в объявлениях
? отмечает тип с нулевым значением
->
разделяет параметры и тело лямбда-выражения
разделяет параметры и тип возвращаемого значения при объявлении лямбды
разделяет условие и тело ветви выражения when
@
вводит аннотацию
вводит или ссылается на метку цикла
вводит или ссылается на лямбда-метку
ссылается на выражение 'this' из внешней области
ссылается на внешний суперкласс
; разделяет несколько операторов на одной строке
$ ссылается на переменную или выражение в строковом шаблоне
_
заменяет неиспользуемый параметр в лямбда выражении
заменяет неиспользуемый параметр в деструктуризирующем присваивании
     */
}