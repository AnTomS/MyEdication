package com.example.myapp.ui.navigation

class NavigationActivity {


    /* изучение навигации между Активити

    binding нужно подключать в gradle app
    buildFeatures {
        viewBinding true
    }
     Создаём доп активити, наследуемся либо от написанной нами активити либо от AppComponentActivity
     если наследоваться от обычной активити, то мы потеряем в реализации некоторых новых фичей.
     переопределям обычный onCreate. назначаем биндинг.
     Инициализируем интерфейс, инициализируем обработчики событий ( вещаем обработчики событий на кнопки).
     Регистрируем активити в АндроидМанифесте.

     1)Как правильно завершать активити? Создать метод с адекватным неймингом, указываищм имя кнопка для перехода на другую активити,
     внутри которого использовать метод finish().
     Финиш завершит текущую активити и вернётся в ту активити, которая была запущена перед текущей.

     2)Для запуска другой активити используется метод startActivity() и объявляется интент. Интент это посыд системе АНдроид, что мы намереваемся что-то сделать,
      который содержит данные для запуска другой активити. к примеру/ Интент связан с системными компонентами
     private fun onAboutPressed() {
        val intent = Intent(this, AboutActivity::class.java)
        startActivity(intent)
        При вызове интента первым параметром указывается Контекст, это класс активити который мы хотим создать.
        так же с помощью интента можно передавать данные между активити. Для этого нужны глобальные переменные и метод putExtra(), вызываемый у Интента.
         пример? intent.putExtra(OptionActivity.EXTRA_OPTIONS, options)
          Указываем Активити, куда передаём нужные данные, указываем созданную нами глобальную переменную и сами данные созданные через data class.
          startActivityForResult(intent, OPTION_REQUEST_CODE) и затем вызываем АктивитифорРесульт
          Затем в нужной нам активити проверяем есть ли у нас сохранённое состояние, то мы возвращаем данные из сохранённого состояния.
          Так же не забывать прописывать исключения. А если данных в saveInstanceState нет, то пытаемся получить данные из переданного Интента
           в данном случае это EXTRA_OPTIONS.

       3) так же возможно передавать данные из второстепенной Активити обратно в главную для этого и используется startActivityForResult(intent, OPTION_REQUEST_CODE)
       Первым параметром мы обозначаем Интент( намерение для запуска), а вторым параметром обозначаем из какой активити должны поступить данные.
       Для такого обозначения можно задать параметром requestCode. пример :
       companion object {
       @JvmStatic private val OPTION_REQUEST_CODE = 1
       }

       А результат метода нам придёт в метод onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
       super.onActivityResult(requestCode, resultCode, data)}
       requestCode: Int - это код для обозначения с какой Активити мы ждём результат.
       resultCode: Int - это код для обозначения какой результ работы активти мы поулчим. Обычно это RESULT_OK
       data: Intent - это данные из Активити
       не забываем проверить что оба кода не пустые
       if (requestCode == OPTION_REQUEST_CODE && resultCode == RESULT_OK) {
         и дальше мы извлекаем данные через getParsedExtra(OptionActivity.EXTRA_OPTIONS)
        указывая в какой активити мы хотим получить данные и саму переменную с данными
       } если же коды не равны, то кидаем исключение


        4) как передавать сами данные из Активити в другую Активити.
        private fun onOpenBoxPressed(){

        val intent = Intent()
        сперва создаём пустой!!!  интент
        intent.putExtra(OptionActivity.EXTRA_OPTIONS, options)
        в пустой интент складываем нужные нам данные, котоыре хотим передать
        setResult(Activity.RESULT_OK, intent)
        вызываем сетрезаут, в который передаём константу результата и сами данные

        finish()
        финиш для завершения
        }
        5) так же есть флаги для навигации между стеком активити. Стек активити это список активти, которые уже были запущены и хранятся в списке.
        пример:
        private val fun onToMainPressed() {
        val intent = Intent(this, MainActivity::class.java)
        создаётся интент с параметрми контекста и активити назначения

        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
        FLAG_ACTIVITY_CLEAR_TOP - удаляет все предыдущие активити из стека и переходит на активити назначения, созданную заного
        FLAG_ACTIVITY_SINGLE_TOP-проверяет была ли создана активити из назначения и если да, то переходит на активити назначения и очищает предыдущий стек
        startActivity(intent)
        }
     */
}

